import axios from "axios";
import { v4 as uuidv4 } from "uuid";
import { z } from "zod";

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

import { PCFactory } from "./marketplaces/PCFactory.js";
import { CartService } from "./services/cartService.js";
import { createPayment } from "./services/FlowPayment.js";

import dotenv from "dotenv";
dotenv.config({ path: "../.env" });

const cartService = new CartService();
const pcFactory = new PCFactory();

const server = new McpServer({
  name: "marketplace",
  version: "1.0.0",
  capabilities: {
    resources: {},
    tools: {},
  },
});

server.tool("generate-uuid", "Generate a UUID for session", {}, () => {
  const uuid = uuidv4();

  return {
    content: [
      {
        type: "text",
        text: JSON.stringify({
          uuid,
        }),
      },
    ],
  };
});

server.tool(
  "find-products",
  "Search for products by name. Returns a list of products with prices and images.",
  {
    query: z
      .string()
      .min(3)
      .describe(
        "query to search for a product, name, category, description, etc."
      ),
    sessionId: z
      .string()
      .uuid()
      .describe(
        "Unique session ID, it must be generated by the client, it will be returned in each response"
      ),
    precioMin: z
      .number()
      .int()
      .positive()
      .optional()
      .describe("Minimum price filter (in CLP)"),
    precioMax: z
      .number()
      .int()
      .positive()
      .optional()
      .describe("Maximum price filter (in CLP)"),
    page: z
      .number()
      .int()
      .min(0)
      .optional()
      .describe("Page number, starting from 0"),
    size: z
      .number()
      .int()
      .min(1)
      .max(50)
      .optional()
      .describe("Number of products per page (max 50)"),
  },
  async ({ query, sessionId, precioMin, precioMax, page = 0, size = 12 }) => {
    const result = await pcFactory.searchProduct(
      query,
      page,
      size,
      precioMin,
      precioMax
    );

    const content: (
      | { type: "text"; text: string }
      | { type: "image"; data: string; mimeType: string }
    )[] = [];

    for (const { id, nombre, marca, categoria, precio, thumbnail } of result
      .content.items) {
      content.push({
        type: "text",
        text: `id: ${id} - ${nombre} - ${marca} - ${categoria} - precio: ${JSON.stringify(
          precio
        )}`,
      });

      try {
        const response = await axios.get(
          "https://assets.pcfactory.cl" + thumbnail,
          {
            responseType: "arraybuffer",
          }
        );
        const base64 = Buffer.from(response.data).toString("base64");
        const mimeType = response.headers["content-type"] || "image/jpeg";

        content.push({
          type: "image",
          data: base64,
          mimeType,
        });
      } catch (error) {
        content.push({
          type: "text",
          text: "(imagen no disponible)",
        });
      }
    }

    return {
      content: [
        ...content,
        {
          type: "text",
          text: `sessionId: ${sessionId}`,
        },
      ],
    };
  }
);

server.tool(
  "more-info-product",
  "show more info in produtct",
  {
    id: z.string().describe("id de producto"),
  },
  async ({ id }) => {
    const result = await pcFactory.getProductDetails(id);
    return {
      content: [
        {
          type: "text",
          text: JSON.stringify(result),
        },
      ],
    };
  }
);

server.tool(
  "add-to-cart",
  "Add one or more products to the shopping cart by session ID",
  {
    products: z
      .array(
        z.object({
          id: z.string().min(1).describe("The product ID"),
          name: z.string().min(1).describe("The name of the product"),
          description: z
            .string()
            .min(1)
            .describe("The description of the product"),
          price: z.number().describe("The price of the product"),
        })
      )
      .min(1)
      .describe("Array of products to add to the shopping cart"),
    sessionId: z
      .string()
      .uuid()
      .describe(
        "Client-generated UUID to identify the session. This ID must be included in every request and will be returned in the response."
      ),
  },
  async ({ products, sessionId }) => {
    const result = await cartService.addToCart(sessionId, products);

    if (result) {
      return {
        content: [
          {
            type: "text",
            text: JSON.stringify({
              sessionId,
              cart: products.map((product) => ({
                id: product.id,
                name: product.name,
                description: product.description,
                price: product.price,
              })),
            }),
          },
        ],
      };
    } else {
      return {
        content: [
          {
            type: "text",
            text: `Error al agregar los productos al carrito para el sessionId: ${sessionId}.`,
          },
        ],
      };
    }
  }
);

server.tool(
  "view-cart",
  "Retrieve the contents of the shopping cart for a specific session",
  {
    sessionId: z
      .string()
      .uuid()
      .describe(
        "Client-generated UUID to identify the session. This ID must be included in the request."
      ),
  },
  async ({ sessionId }) => {
    const cartItems = await cartService.viewCart(sessionId);

    if (cartItems.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: `No cart found for session ID: ${sessionId}. Please ensure the session ID is correct and try again.`,
          },
        ],
      };
    }

    return {
      content: [
        {
          type: "text",
          text: JSON.stringify({
            sessionId,
            cart: cartItems.map((item) => ({
              product_id: item.product_id,
              product_name: item.product_name,
              product_description: item.product_description,
              product_price: item.product_price,
            })),
          }),
        },
      ],
    };
  }
);

server.tool(
  "remove-from-cart",
  "Remove a product from the shopping cart by product ID",
  {
    sessionId: z.string().uuid().describe("The UUID of the session."),
    productId: z
      .string()
      .min(1)
      .describe("The product ID to be removed from the shopping cart."),
  },
  async ({ sessionId, productId }) => {
    const result = await cartService.removeFromCartById(sessionId, productId);

    if (result) {
      return {
        content: [
          {
            type: "text",
            text: `Product with ID ${productId} was successfully removed from the cart for session ID: ${sessionId}.`,
          },
        ],
      };
    } else {
      return {
        content: [
          {
            type: "text",
            text: `Failed to remove product with ID ${productId} from the cart for session ID: ${sessionId}.`,
          },
        ],
      };
    }
  }
);

server.tool(
  "remove-all-from-cart",
  "Remove all products from the shopping cart by session ID",
  {
    sessionId: z.string().uuid().describe("The UUID of the session."),
  },
  async ({ sessionId }) => {
    const result = await cartService.removeAllFromCart(sessionId);

    if (result) {
      return {
        content: [
          {
            type: "text",
            text: `All products were successfully removed from the cart for session ID: ${sessionId}.`,
          },
        ],
      };
    } else {
      return {
        content: [
          {
            type: "text",
            text: `Failed to remove products from the cart for session ID: ${sessionId}.`,
          },
        ],
      };
    }
  }
);

server.tool(
  "create-payment",
  "Create a payment for the shopping cart",
  {
    sessionId: z
      .string()
      .uuid()
      .describe(
        "Client-generated UUID to identify the session. This ID must be included in the request."
      ),
  },
  async ({ sessionId }) => {
    const cartItems = await cartService.viewCart(sessionId);
    if (cartItems.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: `No cart found for session ID: ${sessionId}. Please ensure the session ID is correct and try again.`,
          },
        ],
      };
    }

    const totalAmount = cartItems.reduce((total, item) => {
      let price = item.product_price;

      if (typeof price === "string") {
        price = parseFloat((price as string).replace(/^\s*\$/, "").trim());
      }

      const validPrice = isNaN(price) ? 0 : price;
      return total + validPrice;
    }, 0);

    const subject =
      `Productos ${sessionId}: ` +
      cartItems
        .map((item) => `${item.product_name} (${item.product_price})`)
        .join(", ") +
      " | Total: $" +
      totalAmount.toFixed(2);

    const flowPayment = await createPayment({
      subject,
      amount: totalAmount,
    });

    console.log("flowPayment", flowPayment);
    if (!flowPayment) {
      return {
        content: [
          {
            type: "text",
            text: `Error creating payment for session ID: ${sessionId}.`,
          },
        ],
      };
    }

    return {
      content: [
        {
          type: "text",
          text: JSON.stringify({
            sessionId,
            "flowPayment URL": flowPayment,
          }),
        },
      ],
    };
  }
);

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Marketplace MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
